input { 
	rabbitmq {
		host => "localhost"
		queue => "heroku_production_queue"
		durable => true
		key => "heroku.v1.production.*"
		exchange => "logs"
		threads => 3
		prefetch_count => 50
		port => 5672
		user => "guest"
		password => "guest"

		add_field => {
			"[@metadata][type]" => "heroku"
            "[ls_feed]" => "prod-elk-ls-01"
		}
	}
}

input {
	rabbitmq {
		host => "localhost"
		queue => "heroku_integration_queue"
		durable => true
		key => "heroku.v1.integration.*"
		exchange => "logs"
		threads => 1
		prefetch_count => 50
		port => 5672
		user => "guest"
		password => "guest"

		add_field => {
			"[@metadata][type]" => "heroku"
            "[ls_feed]" => "prod-elk-ls-01"
		}
	}
}

input {
	rabbitmq {
		host => "localhost"
		queue => "mobile_integration_queue"
		durable => true
		key => "mobile.v1.integration"
		exchange => "logs"
		threads => 1
		prefetch_count => 50
		port => 5672
		user => "guest"
		password => "guest"
		codec => "json"

		add_field => {
			"[@metadata][type]" => "mobile"
			"[ls_feed]" => "prod-elk-ls-01"
		}
	}
}

input {
	rabbitmq {
		host => "localhost"
		queue => "mobile_production_queue"
		durable => true
		key => "mobile.v1.production"
		exchange => "logs"
		threads => 1
		prefetch_count => 50
		port => 5672
		user => "guest"
		password => "guest"
		codec => "json"

		add_field => {
			"[@metadata][type]" => "mobile"
			"[ls_feed]" => "prod-elk-ls-01"
		}
	}
}



filter {
    grok {
        break_on_match => true
        match =>  {
            "message" => [
                "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:timestamp}|-) +(?:%{HOSTNAME:heroku_drain_id}|-) +(?:%{WORD:heroku_source}|-) +(?:%{USERNAME:heroku_dyno}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|) +%{GREEDYDATA:message}",
                "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:timestamp}|-) +(?:%{HOSTNAME:heroku_drain_id}|-) +(?:%{WORD:heroku_source}|-) +(?:%{USERNAME:heroku_dyno}|-) +(?:%{WORD:syslog5424_msgid}|-) +%{GREEDYDATA:message}"
            ]
        }
        overwrite => [ "message" ]
    }

    json {
        skip_on_invalid_json => true
        source => message
        target => "tmp"
    }

    if [tmp][msg] {
        mutate {
            add_field => { "[app_msg]" => "%{[tmp][msg]}" }
        }
    }
    if [tmp][level] {
        mutate {
            add_field => { "[app_level]" => "%{[tmp][level]}" }
        }
    }
    if [tmp][hostname] {
        mutate {
            add_field => { "[app_hostname]" => "%{[tmp][hostname]}" }
        }
    }
    if [tmp][pid] {
        mutate {
            add_field => { "[app_pid]" => "%{[tmp][pid]}" }
        }
    }
    if [tmp][driverId] {
        mutate {
            add_field => { "[app_driverId]" => "%{[tmp][driverId]}" }
        }
    }
    if [tmp][userId] {
        mutate {
            add_field => { "[app_userId]" => "%{[tmp][userId]}" }
        }
    }
    if [tmp][requestId] {
        mutate {
            add_field => { "[app_requestId]" => "%{[tmp][requestId]}" }
        }
    }
    mutate {
        remove_field => [ "tmp" ]
    }
}

output {
  stdout { codec => rubydebug }
}